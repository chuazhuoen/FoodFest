@page "/restaurants/"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]

<h3 class="card-title">Food Restaurants</h3>
<br />

@if (Restaurants == null)
{
    <div class="alert alert-info">Loading Restaurants...</div>
}
else
{
    <table class="table table-responsive">
        <thead>
            <tr>
                <th>ID</th>
                <th>Name</th>
                <th>Number</th>
                <th>Address</th>
                <th>Price</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var restaurant in Restaurants)
            {
            <tr>
                <td>@restaurant.ID</td>
                <td>@restaurant.Name</td>
                <td>@restaurant.Number</td>
                <td>@restaurant.Address</td>
                <td>
                    <a href="/restaurants/view/@restaurant.ID" class="btn btn-primary">
                        <span class="oi oi-book"></span>
                    </a>
                    <a href="/restaurants/view/@restaurant.ID" class="btn btn-warning">
                        <span class="oi oi-pencil"></span>
                    </a>
                    <button class="btn btn-danger" @onclick="@(()=>Delete(restaurant.ID))">
                        <span class="oi oi-delete"></span>
                    </button>
                </td>
            </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Restaurant> Restaurants;

    protected async override Task OnInitializedAsync()
    {
        Restaurants = await _client.GetFromJsonAsync<List<Restaurant>>($"{Endpoints.RestaurantsEndpoint}");
    }

    async Task Delete(int restaurantId)
    {
        var restaurant = Restaurants.First(q => q.ID == restaurantId);
        var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {restaurant.ID}?");
        if (confirm)
        {
            await _client.DeleteAsync($"{Endpoints.RestaurantsEndpoint}/{restaurantId}");
            await OnInitializedAsync();
        }
    }

}