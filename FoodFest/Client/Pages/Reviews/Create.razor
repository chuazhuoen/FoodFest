@page "/reviews/create/"
@inject HttpClient _client
@inject NavigationManager _navManager

<h3 class="card-title">Create New Review</h3>
<hr />
<br />

<EditForm Model="@review" OnValidSubmit="CreateReview">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="form-group">
        <label>Restaurant:</label>
        <div>
            <InputSelect @bind-Value="review.RestId" class="form-control">
                <option value="">--Select Restaurant--</option>
                @if (Restaurants != null)
                 {
                    foreach (var restaurant in Restaurants)
                        {
                            <option value="@restaurant.ID">@restaurant.Name</option>
                        }
                 }
            </InputSelect>
            <ValidationMessage For="@(() => review.RestId)"/>
        </div>
    </div>
    <div class="form-group">
        <label>Ratings: </label>
        <div>
            <InputText @bind-Value="@review.Ratings" class="form-control" />
            <ValidationMessage For="@(() => review.Ratings)" />
        </div>
    </div>
    <div class="form-group">
        <label>Descriptions: </label>
        <div>
            <InputText @bind-Value="@review.Description" class="form-control" />
            <ValidationMessage For="@(() => review.Description)" />
        </div>
    </div>
    <button type="submit" class="btn btn-success btn-block">
        Create Review
    </button>
</EditForm>

@code {
    Review review = new Review();
    private IList<Restaurant> Restaurants;

    protected async override Task OnInitializedAsync()
    {
        Restaurants = await _client.GetFromJsonAsync<List<Restaurant>>($"{Endpoints.RestaurantsEndpoint}");
    }

    private async Task CreateReview()
    {
        await _client.PostAsJsonAsync(Endpoints.ReviewsEndpoint, review);
        _navManager.NavigateTo("/reviews/");
    }
}

